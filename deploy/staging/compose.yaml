version: "3.9"
services:
  db:
    image: postgres:16.4
    container_name: cc_staging_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: UTC
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.4-alpine
    container_name: cc_staging_redis
    restart: unless-stopped
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    image: ${BACKEND_IMAGE}
    container_name: cc_staging_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      UVICORN_HOST: 0.0.0.0
      UVICORN_PORT: 8000
      TZ: UTC
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8000/healthz || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 20

  frontend:
    image: ${FRONTEND_IMAGE}
    container_name: cc_staging_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      TZ: UTC
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:5173/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 20

  caddy:
    image: caddy:2.8.4
    container_name: cc_staging_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      ACME_AGREE: "true"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:2019/config || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  db_data:
  redis_data:
  caddy_data:
  caddy_config:
