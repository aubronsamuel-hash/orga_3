name: CI
on:
  pull_request:
    branches: [ "main" ]
jobs:
  read-roadmap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Rappel lecture docs/roadmap.md
        run: echo "Relire docs/ROADMAP.md (source de verite)."
  backend:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - name: Backend deps
        shell: pwsh
        run: |
          python -m pip install -U pip
          python -m venv backend/.venv
          backend\.venv\Scripts\pip install -r backend\requirements.txt
          if (Test-Path "backend\requirements-dev.txt") { backend\.venv\Scripts\pip install -r backend\requirements-dev.txt }
      - name: Lints
        shell: pwsh
        run: |
          backend\.venv\Scripts\python -m ruff check backend
          backend\.venv\Scripts\python -m mypy --config-file backend\mypy.ini backend
      - name: Tests
        shell: pwsh
        env:
          PYTHONPATH: backend
        run: |
          backend\.venv\Scripts\python -m pytest -q --disable-warnings --maxfail=1
  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Ecrire .npmrc de projet (registry public)
        shell: bash
        run: |
          cat > frontend/.npmrc <<'EOF'
          registry=https://registry.npmjs.org/
          always-auth=false
          audit=false
          fund=false
          strict-ssl=true
          EOF
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install deps
        run: |
          cd frontend
          npm ci --no-audit --no-fund
      - name: Lint + typecheck + unit
        run: |
          cd frontend
          npm run lint
          npm run typecheck
          npm run test:unit
      - name: Build
        run: |
          cd frontend
          npm run build
      - name: Playwright e2e smoke
        run: |
          cd frontend
          npx playwright install --with-deps
          npm run test:e2e
  obs-smoke:
    runs-on: windows-latest
    needs: [backend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - name: Deps minimales
        shell: pwsh
        run: |
          python -m venv backend/.venv
          backend\.venv\Scripts\pip install -r backend\requirements.txt
          if (Test-Path "backend\requirements-dev.txt") { backend\.venv\Scripts\pip install -r backend\requirements-dev.txt }
      - name: Obs smoke (pytest -k obs)
        shell: pwsh
        env:
          PYTHONPATH: backend
        run: |
          backend\.venv\Scripts\python -m pytest -q -k "obs or readiness or metrics"
  docker-smoke:
    runs-on: ubuntu-latest
    needs: [backend]
    steps:
      - uses: actions/checkout@v4
      - name: Build backend image
        run: docker build -t cc-backend:ci -f backend/Dockerfile .
      - name: Run backend container
        run: docker run -d --rm -p 8000:8000 --name cc-backend cc-backend:ci
      - name: Wait for healthz
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:8000/healthz >/dev/null; then exit 0; fi
            sleep 2
          done
          echo "backend not ready"; exit 3
      - name: Check metrics
        run: curl -sSf http://localhost:8000/metrics | head -n 5
  docs-guard:
    runs-on: ubuntu-latest
    needs: [backend, frontend, obs-smoke, docker-smoke]
    steps:
      - uses: actions/checkout@v4
      - name: Docs guard
        shell: pwsh
        run: |
          ./tools/docs_guard.ps1
          ./tools/readme_check.ps1
